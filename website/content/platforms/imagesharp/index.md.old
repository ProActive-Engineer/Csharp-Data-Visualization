# Drawing with ImageSharp

[ImageSharp](https://github.com/SixLabors/ImageSharp) is a 2D graphics library developed by [Six Labors](https://sixlabors.com/) (a [small company](https://sixlabors.com/about/) whose primary product is ImageSharp) and is distributed under the permissive [Apache 2.0 License](https://github.com/SixLabors/ImageSharp/blob/master/LICENSE). ImageSharp is similar to System.Drawing, but a with a more modern (managed, thread-safe, functional-style) implementation.

<div align="center">

![](graphics/drawing-with-ImageSharp.png)

Drawing Library | 10 lines | 1k lines | 10k lines | 100k lines
---|---|---|---|---
System.Drawing | 0.614 ms | 28.350 ms | 278.477 ms | 2.834 sec
ImageSharp | 60.874 ms | 2.981 sec | 29.276 sec | ~5 min

</div>

## Code

### NuGet Package

Download the `SixLabors.ImageSharp.Drawing` NuGet package

**‚ö†Ô∏è** ***You must include prereleases while searching NuGet***

### Rendering

The gist here is that you create an `Image`, then `Mutate` it with an `imageContext` (function) that does all the drawing. Afterwords you can save it (in memory) as a `Bitmap`, then display it on a Picturebox. 

Displaying a Bitmap on a Picturebox is preferred because the Picturebox is natively double-buffered, eliminating flickering often observed when animations rapidly update the underlying Image.

```cs

using (var image = new Image<SixLabors.ImageSharp.PixelFormats.Rgba32>(600, 400))
{
    image.Mutate(imageContext =>
    {
        // draw background
        var bgColor = SixLabors.ImageSharp.PixelFormats.Rgba32.FromHex("#003366");
        imageContext.BackgroundColor(bgColor);

        int lineCount = 1000;
        for (int i = 0; i < lineCount; i++)
        {
            // create an array of two points to make the straight line
            var points = new SixLabors.Primitives.PointF[2];
            points[0] = new SixLabors.Primitives.PointF(
                x: (float)(rand.NextDouble() * pictureBox1.Width),
                y: (float)(rand.NextDouble() * pictureBox1.Height));
            points[1] = new SixLabors.Primitives.PointF(
                x: (float)(rand.NextDouble() * pictureBox1.Width),
                y: (float)(rand.NextDouble() * pictureBox1.Height));

            // create a pen unique to this line
            var lineColor = SixLabors.ImageSharp.Color.FromRgba(
                r: (byte)rand.Next(255),
                g: (byte)rand.Next(255),
                b: (byte)rand.Next(255),
                a: (byte)rand.Next(255));
            float lineWidth = rand.Next(1, 10);
            var linePen = new SixLabors.ImageSharp.Processing.Pen(lineColor, lineWidth);

            // draw the line
            imageContext.DrawLines(linePen, points);
        }
    });

    // render onto an Image
    var stream = new System.IO.MemoryStream();
    image.SaveAsBmp(stream);
    System.Drawing.Image img = System.Drawing.Image.FromStream(stream);

    // dispose the old image before displaying the new one
    pictureBox1.Image?.Dispose();
    pictureBox1.Image = img;
}
```

### Maximizing Performance

#### Use 64-bit
Make sure you run a 64-bit build. This may be required to support hardware acceleration as well:

```cs
Debug.WriteLine($"This is a {IntPtr.Size * 8}-bit application");
```

```
This is a 64-bit application
```

#### Ensure SMID is used

ImageSharp can use [single instruction, multiple data (SIMD)](https://en.wikipedia.org/wiki/SIMD) for hardware-accelerated drawing. Check to ensure SMID is enabled:

```cs
if (System.Numerics.Vector.IsHardwareAccelerated)
    Debug.WriteLine($"hardware acceleration ENABLED");
else
    Debug.WriteLine($"hardware acceleration DISABLED");
```

## Conclusions

### Advantages

* Fully managed memory (less prone to memory leaks)
* Free of system-wide process locks (better thread safety)
* Targets .NET Standard 1.3 (so it is cross-platform and cross-framework)
 
> üí° In the early days of .NET Core, ImageSharp was the primary option for drawing graphics since System.Drawing wasn't initially supported. System.Drawing.Common was released in 2017 and it targeted .NET Standard 2.0, bringing cross-platform System.Drawing support to .NET Core 2.0 applications. Since ImageSharp targets an earlier version of .NET Standard (1.3), is is the primary available option for applications targeting .NET Core 1.0.

### Disadvantages
* ImageSharp has similar performance to System.Drawing when it comes to drawing simple images. When drawing large numbers of objects is required or animations are needed, ImageSharp falls short.

## Source Code

Source code for this project is on GitHub:
[/dev/old/drawing/alternate/ImageSharpBenchmark](https://github.com/swharden/Csharp-Data-Visualization/blob/master/dev/old/drawing/alternate/ImageSharpBenchmark)